// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Telegram
class StarWarsClicker {
    constructor() {
        this.state = {
            credits: 0,
            forcePoints: 0,
            level: 1,
            xp: 0,
            xpToNextLevel: 100,
            cps: 0,
            clickPower: 1,
            clickCount: 0,
            upgrades: [
                { id: 1, name: "–î—Ä–æ–∏–¥-—É–±–æ—Ä—â–∏–∫", description: "+1 –∫—Ä–µ–¥–∏—Ç/—Å–µ–∫", baseCost: 50, owned: 0, cps: 1 },
                { id: 2, name: "–¢–æ—Ä–≥–æ–≤—ã–π –∫–æ—Ä–∞–±–ª—å", description: "+5 –∫—Ä–µ–¥–∏—Ç–æ–≤/—Å–µ–∫", baseCost: 200, owned: 0, cps: 5 },
                { id: 3, name: "–î—Ä–æ–∏–¥-–∞—Å—Ç—Ä–æ–º–µ—Ö–∞–Ω–∏–∫", description: "+10 –∫—Ä–µ–¥–∏—Ç–æ–≤/—Å–µ–∫", baseCost: 500, owned: 0, cps: 10 },
                { id: 4, name: "–®–∞—Ö—Ç–∞ —Å–ø–∞–π—Å–∞", description: "+20 –∫—Ä–µ–¥–∏—Ç–æ–≤/—Å–µ–∫", baseCost: 1000, owned: 0, cps: 20 },
                { id: 5, name: "–ó–≤–µ–∑–¥–æ–ª–µ—Ç", description: "+50 –∫—Ä–µ–¥–∏—Ç–æ–≤/—Å–µ–∫", baseCost: 5000, owned: 0, cps: 50 }
            ],
            achievements: [
                { id: 1, name: "–ü–µ—Ä–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã", goal: 100, reward: 10, achieved: false },
                { id: 2, name: "–ù–æ–≤–∏—á–æ–∫", goal: 1000, reward: 50, achieved: false },
                { id: 3, name: "–û–ø—ã—Ç–Ω—ã–π", goal: 5000, reward: 100, achieved: false },
                { id: 4, name: "–ü–µ—Ä–≤–∞—è –°–∏–ª–∞", goal: 1, reward: 50, achieved: false },
                { id: 5, name: "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π", goal: 5, reward: 100, achieved: false },
                { id: 6, name: "–ü–∞–¥–∞–≤–∞–Ω", goal: 5, reward: 100, achieved: false },
                { id: 7, name: "–†—ã—Ü–∞—Ä—å", goal: 10, reward: 200, achieved: false },
                { id: 8, name: "–ü–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ", goal: 1, reward: 50, achieved: false }
            ],
            bosses: [
                { id: 1, name: "–î–∞—Ä—Ç –í–µ–π–¥–µ—Ä", maxHealth: 1000, currentHealth: 1000, reward: 5000, forceCost: 100 },
                { id: 2, name: "–î–∞—Ä—Ç –ú–æ–ª", maxHealth: 2500, currentHealth: 2500, reward: 10000, forceCost: 250 },
                { id: 3, name: "–û–±–∏-–í–∞–Ω", maxHealth: 5000, currentHealth: 5000, reward: 20000, forceCost: 500 }
            ],
            clan: null,
            lastPlayDate: null,
            consecutiveDays: 0
        };

        this.cacheElements();
        this.init();
    }

    cacheElements() {
        this.el = {
            credits: document.getElementById('credits'),
            forcePoints: document.getElementById('force-points'),
            level: document.getElementById('level'),
            cps: document.getElementById('cps'),
            clickCount: document.getElementById('click-count'),
            clicker: document.getElementById('clicker'),
            upgradesGrid: document.getElementById('upgrades-grid'),
            achievementsGrid: document.getElementById('achievements-grid'),
            bossesGrid: document.getElementById('bosses-grid'),
            clanContainer: document.getElementById('clan-container'),
            notification: document.getElementById('notification'),
            tabButtons: document.querySelectorAll('.tab-btn'),
            tabContents: document.querySelectorAll('.tab-content')
        };
    }

    init() {
        this.loadGame();
        this.setupTabs();
        this.setupClicker();
        this.renderAll();
        this.startPassiveIncome();
        this.checkDailyReward();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram WebView
        if (window.Telegram && window.Telegram.WebApp) {
            this.setupTelegramWebApp();
        }
    }

    setupTelegramWebApp() {
        Telegram.WebApp.expand();
        Telegram.WebApp.enableClosingConfirmation();
        Telegram.WebApp.setHeaderColor('#0a1a2f');
        Telegram.WebApp.setBackgroundColor('#0a1a2f');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        this.setupTelegramData();
    }

    setupTelegramData() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±–ª–∞–∫–æ Telegram
    }

    setupTabs() {
        this.el.tabButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.dataset.tab;
                this.switchTab(tabId);
            });
        });
    }

    switchTab(tabId) {
        this.el.tabContents.forEach(tab => tab.classList.remove('active'));
        this.el.tabButtons.forEach(btn => btn.classList.remove('active'));
        
        document.getElementById(tabId).classList.add('active');
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
    }

    setupClicker() {
        let lastClickTime = 0;
        const clickDelay = 100; // 100ms –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
        
        this.el.clicker.addEventListener('click', (e) => {
            const now = Date.now();
            if (now - lastClickTime < clickDelay) return;
            lastClickTime = now;
            
            this.handleClick(e);
        });
    }

    handleClick(e) {
        // –≠—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
        const clickEffect = document.createElement('div');
        clickEffect.className = 'click-effect';
        clickEffect.style.left = `${e.offsetX - 15}px`;
        clickEffect.style.top = `${e.offsetY - 15}px`;
        this.el.clicker.appendChild(clickEffect);
        setTimeout(() => clickEffect.remove(), 500);
        
        // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        this.state.credits += this.state.clickPower;
        this.state.clickCount++;
        
        // –®–∞–Ω—Å 1% –ø–æ–ª—É—á–∏—Ç—å –û—á–∫–æ –°–∏–ª—ã
        if (Math.random() < 0.01) {
            this.state.forcePoints++;
            this.showNotification('‚ö° +1 –û—á–∫–æ –°–∏–ª—ã!');
        }
        
        // –û–ø—ã—Ç
        this.addXP(1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        this.updateUI();
        this.checkAchievements();
    }

    startPassiveIncome() {
        this.passiveIncomeInterval = setInterval(() => {
            if (this.state.cps > 0) {
                this.state.credits += this.state.cps / 10;
                this.updateUI();
            }
        }, 100);
    }

    updateUI() {
        this.el.credits.textContent = this.formatNumber(this.state.credits);
        this.el.forcePoints.textContent = this.formatNumber(this.state.forcePoints);
        this.el.cps.textContent = this.formatNumber(this.state.cps);
        
        const titles = ["–ü–∞–¥–∞–≤–∞–Ω", "–†—ã—Ü–∞—Ä—å", "–ú–∞–≥–∏—Å—Ç—Ä", "–°–æ–≤–µ—Ç", "–ú–∞—Å—Ç–µ—Ä"];
        const titleIndex = Math.min(Math.floor(this.state.level / 5), titles.length - 1);
        this.el.level.textContent = `${titles[titleIndex]} (${this.state.level})`;
    }

    formatNumber(num) {
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return Math.floor(num);
    }

    renderAll() {
        this.renderUpgrades();
        this.renderBosses();
        this.renderAchievements();
        this.renderClan();
    }

    renderUpgrades() {
        this.el.upgradesGrid.innerHTML = this.state.upgrades.map(upgrade => {
            const cost = Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.owned));
            const canAfford = this.state.credits >= cost;
            
            return `
                <div class="upgrade-card">
                    <h3>${upgrade.name}</h3>
                    <p>${upgrade.description}</p>
                    <p>–ö—É–ø–ª–µ–Ω–æ: ${upgrade.owned}</p>
                    <p>–¶–µ–Ω–∞: ${this.formatNumber(cost)}</p>
                    <button ${!canAfford ? 'disabled' : ''} 
                            data-upgrade-id="${upgrade.id}">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            `;
        }).join('');
        
        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.querySelectorAll('[data-upgrade-id]').forEach(btn => {
            btn.addEventListener('click', () => {
                const upgradeId = parseInt(btn.dataset.upgradeId);
                this.buyUpgrade(upgradeId);
            });
        });
    }

    buyUpgrade(upgradeId) {
        const upgrade = this.state.upgrades.find(u => u.id === upgradeId);
        const cost = Math.floor(upgrade.baseCost * Math.pow(1.15, upgrade.owned));
        
        if (this.state.credits >= cost) {
            this.state.credits -= cost;
            upgrade.owned++;
            this.state.cps = this.state.upgrades.reduce((sum, u) => sum + (u.owned * u.cps), 0);
            
            this.addXP(5);
            this.updateUI();
            this.renderUpgrades();
            this.showNotification(`üõ† ${upgrade.name} –∫—É–ø–ª–µ–Ω–æ!`);
            this.checkAchievements();
            this.saveGame();
        }
    }

    renderBosses() {
        this.el.bossesGrid.innerHTML = this.state.bosses.map(boss => {
            const healthPercent = (boss.currentHealth / boss.maxHealth) * 100;
            const isDefeated = boss.currentHealth <= 0;
            const canAttack = this.state.forcePoints >= boss.forceCost && !isDefeated;
            
            return `
                <div class="boss-card">
                    <img src="img/${boss.name.replace(' ', '').toLowerCase()}.webp" alt="${boss.name}" loading="lazy">
                    <h3>${boss.name}</h3>
                    <div class="health-bar">
                        <div class="health" style="width: ${healthPercent}%"></div>
                    </div>
                    <button class="attack-btn" ${!canAttack ? 'disabled' : ''} 
                            data-boss-id="${boss.id}">
                        ${isDefeated ? '–ü–û–ë–ï–ñ–î–ï–ù' : `–ê—Ç–∞–∫–æ–≤–∞—Ç—å (${boss.forceCost} –û–°)`}
                    </button>
                </div>
            `;
        }).join('');
        
        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.querySelectorAll('[data-boss-id]').forEach(btn => {
            btn.addEventListener('click', () => {
                const bossId = parseInt(btn.dataset.bossId);
                this.attackBoss(bossId);
            });
        });
    }

    attackBoss(bossId) {
        const boss = this.state.bosses.find(b => b.id === bossId);
        
        if (this.state.forcePoints >= boss.forceCost && boss.currentHealth > 0) {
            this.state.forcePoints -= boss.forceCost;
            const damage = 50 + (this.state.level * 5);
            boss.currentHealth = Math.max(0, boss.currentHealth - damage);
            
            if (boss.currentHealth <= 0) {
                this.state.credits += boss.reward;
                this.showNotification(`üéâ ${boss.name} –ø–æ–±–µ–∂–¥–µ–Ω! +${this.formatNumber(boss.reward)}`);
                this.addXP(20);
            }
            
            this.updateUI();
            this.renderBosses();
            this.checkAchievements();
            this.saveGame();
        }
    }

    renderAchievements() {
        this.el.achievementsGrid.innerHTML = this.state.achievements.map(ach => {
            const progress = this.getAchievementProgress(ach);
            const achieved = progress >= ach.goal;
            
            return `
                <div class="achievement-card ${achieved ? '' : 'locked'}">
                    <h4>${ach.name}</h4>
                    <p>${ach.goal} ${ach.name.includes('–∫—Ä–µ–¥–∏—Ç') ? '–∫—Ä–µ–¥–∏—Ç–æ–≤' : ach.name.includes('–°–∏–ª–∞') ? '–û–°' : '—É—Ä–æ–≤–µ–Ω—å'}</p>
                    <p>–ù–∞–≥—Ä–∞–¥–∞: +${ach.reward}</p>
                    ${!achieved ? `<p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}/${ach.goal}</p>` : ''}
                </div>
            `;
        }).join('');
    }

    getAchievementProgress(achievement) {
        switch(achievement.id) {
            case 1: case 2: case 3: return Math.min(this.state.credits, achievement.goal);
            case 4: case 5: return Math.min(this.state.forcePoints, achievement.goal);
            case 6: case 7: return Math.min(this.state.level, achievement.goal);
            case 8: return this.state.upgrades.reduce((sum, u) => sum + u.owned, 0);
            default: return 0;
        }
    }

    checkAchievements() {
        this.state.achievements.forEach(ach => {
            if (!ach.achieved) {
                const progress = this.getAchievementProgress(ach);
                if (progress >= ach.goal) {
                    ach.achieved = true;
                    this.state.credits += ach.reward;
                    this.showNotification(`üèÜ ${ach.name}! +${ach.reward} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
                }
            }
        });
        
        this.renderAchievements();
        this.updateUI();
    }

    renderClan() {
        if (this.state.clan) {
            this.el.clanContainer.innerHTML = `
                <div class="clan-header">
                    <h3>${this.state.clan.name}</h3>
                    <p>–£—Ä–æ–≤–µ–Ω—å: ${this.state.clan.level}</p>
                    <p>–ö–∞–∑–Ω–∞: ${this.formatNumber(this.state.clan.treasury)}</p>
                </div>
                <div class="donate-section">
                    <input type="number" id="donation-amount" min="1000" value="1000" step="1000">
                    <button id="donate-btn">–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å</button>
                </div>
            `;
            
            document.getElementById('donate-btn').addEventListener('click', () => {
                const amount = parseInt(document.getElementById('donation-amount').value);
                this.donateToClan(amount);
            });
        } else {
            this.el.clanContainer.innerHTML = `
                <button id="create-clan-btn">–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω (5,000)</button>
                <div id="clan-creation" style="display:none;">
                    <input type="text" id="clan-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞">
                    <button id="confirm-clan-btn">–°–æ–∑–¥–∞—Ç—å</button>
                </div>
            `;
            
            document.getElementById('create-clan-btn').addEventListener('click', () => {
                if (this.state.credits >= 5000) {
                    document.getElementById('clan-creation').style.display = 'block';
                } else {
                    this.showNotification('–ù—É–∂–Ω–æ 5,000 –∫—Ä–µ–¥–∏—Ç–æ–≤');
                }
            });
            
            document.getElementById('confirm-clan-btn').addEventListener('click', () => {
                const name = document.getElementById('clan-name').value.trim();
                if (name.length >= 3) {
                    this.state.credits -= 5000;
                    this.state.clan = {
                        name,
                        level: 1,
                        treasury: 0,
                        members: ['–í—ã']
                    };
                    this.showNotification(`–ö–ª–∞–Ω "${name}" —Å–æ–∑–¥–∞–Ω!`);
                    this.renderClan();
                    this.saveGame();
                }
            });
        }
    }

    donateToClan(amount) {
        if (amount >= 1000 && this.state.credits >= amount) {
            this.state.credits -= amount;
            this.state.clan.treasury += amount;
            
            const levelsGained = Math.floor(this.state.clan.treasury / 10000) - (this.state.clan.level - 1);
            if (levelsGained > 0) {
                this.state.clan.level += levelsGained;
                this.showNotification(`–ö–ª–∞–Ω –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${this.state.clan.level}!`);
            }
            
            this.updateUI();
            this.renderClan();
            this.saveGame();
        }
    }

    addXP(amount) {
        this.state.xp += amount;
        while (this.state.xp >= this.state.xpToNextLevel) {
            this.state.xp -= this.state.xpToNextLevel;
            this.state.level++;
            this.state.xpToNextLevel = Math.floor(this.state.xpToNextLevel * 1.2);
            this.showNotification(`üéá –£—Ä–æ–≤–µ–Ω—å ${this.state.level}!`);
        }
    }

    checkDailyReward() {
        const today = new Date().toDateString();
        if (this.state.lastPlayDate !== today) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            if (this.state.lastPlayDate === yesterday.toDateString()) {
                this.state.consecutiveDays++;
            } else {
                this.state.consecutiveDays = 1;
            }
            
            this.state.lastPlayDate = today;
            const reward = Math.floor(100 * Math.pow(1.1, this.state.consecutiveDays - 1));
            this.state.credits += reward;
            this.showNotification(`üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${reward} (–î–µ–Ω—å ${this.state.consecutiveDays})`);
            this.saveGame();
        }
    }

    showNotification(message) {
        this.el.notification.textContent = message;
        this.el.notification.style.opacity = '1';
        setTimeout(() => {
            this.el.notification.style.opacity = '0';
        }, 2000);
    }

    saveGame() {
        localStorage.setItem('swClicker', JSON.stringify(this.state));
        // –î–ª—è Telegram –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.sendData(JSON.stringify(this.state));
        }
    }

    loadGame() {
        const saved = localStorage.getItem('swClicker');
        if (saved) {
            this.state = JSON.parse(saved);
            this.state.cps = this.state.upgrades.reduce((sum, u) => sum + (u.owned * u.cps), 0);
        }
        
        // –î–ª—è Telegram –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –æ–±–ª–∞–∫–∞
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', () => {
    const game = new StarWarsClicker();
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => game.saveGame(), 30000);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    window.addEventListener('beforeunload', () => game.saveGame());
    
    // –î–ª—è Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp) {
        Telegram.WebApp.ready();
    }
});
